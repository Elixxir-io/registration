# From: https://about.gitlab.com/2017/09/21/how-to-create-ci-cd-pipeline-with-autodeploy-to-kubernetes-using-gitlab-and-helm/

cache:
  untracked: true
  key: "$CI_BUILD_REF_NAME"
  paths:
    - vendor/

before_script:
  - go version || echo "Go executable not found."
  - echo $CI_BUILD_REF
  - echo $CI_PROJECT_DIR
  - echo $PWD
  - eval $(ssh-agent -s)
  - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
  - mkdir -p ~/.ssh
  - chmod 700 ~/.ssh
  - ssh-keyscan -t rsa $GITLAB_SERVER > ~/.ssh/known_hosts
  - git config --global url."git@$GITLAB_SERVER:".insteadOf "https://gitlab.com/"
  - export PATH=$HOME/go/bin:$PATH
  - export GOPRIVATE=$GITLAB_SERVER/elixxir/*,$GITLAB_SERVER/xx_network/*

stages:
  - build
  - tag
  - trigger_integration

build:
  stage: build
  image: elixxirlabs/cuda-go:go1.13-cuda11.1-mc
  except:
    - tags
  script:
    - git clean -ffdx
    - go mod vendor -v
    - go build ./...
    - go mod tidy

    - mkdir -p testdata
    # Test coverage
    - go-acc --covermode atomic --output testdata/coverage.out ./... -- -v
    # Exclude cmd from test coverage as it is command line related tooling
    # - grep -v -e cmd testdata/coverage.out > testdata/coverage-real.out
    - grep -v -e trackRounds testdata/coverage.out > testdata/coverage-real.out
    - go tool cover -func=testdata/coverage-real.out
    - go tool cover -html=testdata/coverage-real.out -o testdata/coverage.html

    # Test Coverage Check
    - go tool cover -func=testdata/coverage.out | grep "total:" | awk '{print $3}' | sed 's/\%//g' > testdata/coverage-percentage.txt
    - export CODE_CHECK=$(echo "$(cat testdata/coverage-percentage.txt) >= $MIN_CODE_COVERAGE" | bc -l)
    - (if [ "$CODE_CHECK" == "1" ]; then echo "Minimum coverage of $MIN_CODE_COVERAGE succeeded"; else echo "Minimum coverage of $MIN_CODE_COVERAGE failed"; exit 1; fi);

    - mkdir -p release
    - rm -rf upload || true
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' ./...
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' -o release/registration.linux64 main.go
    - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -tags stateless -trimpath -ldflags '-w -s' -o release/registration.stateless.linux64 main.go
    - GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' -o release/registration.win64 main.go
    - GOOS=windows GOARCH=amd64 CGO_ENABLED=0 go build -tags stateless -trimpath -ldflags '-w -s' -o release/registration.stateless.win64 main.go
    - GOOS=windows GOARCH=386 CGO_ENABLED=0 go build -ldflags '-w -s' -o release/registration.win32 main.go
    - GOOS=windows GOARCH=386 CGO_ENABLED=0 go build -tags stateless -trimpath -ldflags '-w -s' -o release/registration.stateless.win32 main.go
    - GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -ldflags '-w -s' -o release/registration.darwin64 main.go
    - GOOS=darwin GOARCH=amd64 CGO_ENABLED=0 go build -tags stateless -trimpath -ldflags '-w -s' -o release/registration.stateless.darwin64 main.go
    - mkdir -p upload
    - mv release/registration.stateless.* upload/
    - /upload-artifacts.sh upload/
  artifacts:
    paths:
      - vendor/
      - testdata/
      - release/

tag:
    stage: tag
    only:
        - master
    image: elixxirlabs/cuda-go:go1.13-cuda11.1-mc
    script:
        - git remote add origin_tags git@$GITLAB_SERVER:elixxir/registration.git || true
        - git remote set-url origin_tags git@$GITLAB_SERVER:elixxir/registration.git || true
        - git tag $(./release/registration.linux64 version | grep "xx network Permissioning Server v"| cut -d ' ' -f5) -f
        - git push origin_tags -f --tags

trigger_integration:
  stage: trigger_integration
  trigger:
    project: elixxir/integration
    branch: $CI_COMMIT_REF_NAME
  only:
    - release
    - master
