////////////////////////////////////////////////////////////////////////////////
// Copyright Â© 2018 Privategrity Corporation                                   /
//                                                                             /
// All rights reserved.                                                        /
////////////////////////////////////////////////////////////////////////////////

// Handles creating callbacks for hooking into comms library

package cmd

import (
	"crypto/rand"
	"errors"
	jww "github.com/spf13/jwalterweatherman"
	"gitlab.com/elixxir/comms/registration"
	"gitlab.com/elixxir/crypto/cyclic"
	"gitlab.com/elixxir/crypto/signature"
	"gitlab.com/elixxir/registration/database"
)

// Hardcoded DSA keypair for registration server
var PrivateKey = signature.ReconstructPrivateKey(
	signature.ReconstructPublicKey(
		signature.CustomDSAParams(
			cyclic.NewIntFromString(
				"30949293278198593511477868896720820117970022649354083015698831869517631035497255717290731733400631568292419488068270853879446835896394792942527922345721315835087999713923029666645508890669758301919913914652337841732954845320338088953961062197174831408484541724769090600772212012008134779371969302277700742358184424756898924554750635004422565047329512179531783894820452271954825345153615082023708518818544566754998254339197976722237939663162344981456595477791349977541336343369833538285270028247959464556573828897858680537201463583254256851251853663730104874459703467620271776788559438303327562649293237879464353546437", 10),
			cyclic.NewIntFromString(
				"103130506967384723850031368742455125174573322543907594910489683099272678070181", 10),
			cyclic.NewIntFromString(
				"20053598158707091877705744803141780900125016173151622803763124415608912215142522243921671977218421094826664151968507433725949181351220293493915668675115092248247859418457735105445562876402161701317815381401409745196087605995639299122547051518472973100823597655482304240910147969228686025066097699321783719506892914592515223667969703243508512744436567354854972042844926515628991682907710290693211482390402107400664823680296900676390566282037425799361335175234814594516107241808232038880694090781684669671853894494601997160262275091955814872812564499939145091300077656207352736379090482976107073964793474015181883057731", 10)),
		cyclic.NewIntFromString(
			"26463486228990882175412961082117137129236932723218315229770483288885959850107032025589742791223153420660263350741272032644251726448226821113652426407751193610917557252606720692673230795937716224132057988622950839933054136803749612534401778283421126049147077636399968571534289591857614581770480134396036385489740402012223687706110013677953603225892166382503261546944881593648396200024140871260398637499841743509851955620853951655918063387917465276101165812190169399925746034743728536253929853239613918426568522563185456387365104515482472761127162554264087060221287919020535388758461876720271863904323144519014259335081", 10)),
	cyclic.NewIntFromString(
		"5002930928698038316008346174915439687347278373382006976538581782329554765839", 10))

type RegistrationImpl struct{}

// Initializes a Registration Handler interface
func NewRegistrationImpl() registration.Handler {
	return registration.Handler(&RegistrationImpl{})
}

// Handle registration attempt by a Client
func (m *RegistrationImpl) RegisterUser(registrationCode string, Y, P, Q,
	G []byte) (hash, R, S []byte, err error) {

	// Check database to verify given registration code
	err = database.RegCodes.UseCode(registrationCode)
	if err != nil {
		// Invalid registration code, return an error
		jww.ERROR.Printf("Error validating registration code: %s", err)
		return make([]byte, 0), make([]byte, 0), make([]byte, 0), err
	}

	// Concatenate Client public key byte slices
	data := make([]byte, 0)
	data = append(data, Y...)
	data = append(data, P...)
	data = append(data, Q...)
	data = append(data, G...)

	// Use hardcoded keypair to sign Client-provided public key
	sig, err := PrivateKey.Sign(data, rand.Reader)
	if err != nil {
		// Unable to sign public key, return an error
		jww.ERROR.Printf("Error signing client public key: %s", err)
		return make([]byte, 0), make([]byte, 0), make([]byte, 0),
			errors.New("unable to validate client public key")
	}

	// Return signed public key to Client with empty error field
	jww.INFO.Printf("Verification complete for registration code %s",
		registrationCode)
	return data, sig.R.Bytes(), sig.S.Bytes(), nil
}
